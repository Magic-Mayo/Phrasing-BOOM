{"version":3,"sources":["components/Character/index.js","App.js","serviceWorker.js","index.js"],"names":["Character","props","className","animation","onClick","handleSelection","id","src","image","alt","name","Archer","state","score","highScore","characters","clicked","selection","restart","setState","includes","setTimeout","shuffle","correct","shuffledArray","len","length","i","randomIndex","Math","floor","random","this","map","all","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6tCAYeA,G,MARG,SAACC,GACf,OACI,yBAAKC,UAAS,cAASD,EAAME,WAAaC,QAAS,kBAAMH,EAAMI,gBAAgBJ,EAAMK,MACjF,yBAAKC,IAAKN,EAAMO,MAAOC,IAAKR,EAAMS,U,OCwE/BC,E,2MAzEXC,MAAQ,CACJC,MAAO,EACPC,UAAW,EACXC,WAAYA,EACZC,QAAS,GACTC,UAAW,wBAAIf,UAAU,qBAAd,8B,EAGfgB,QAAU,WACN,EAAKC,SAAS,CAACF,UAAW,wBAAIf,UAAU,qBAAd,+BAC1B,EAAKU,MAAME,UAAY,EAAKF,MAAMC,MAAQ,EAAKM,SAAS,CAACL,UAAW,EAAKF,MAAMC,MAAOA,MAAO,EAAGG,QAAS,KAAO,EAAKG,SAAS,CAACN,MAAO,EAAGG,QAAS,M,EAGtJX,gBAAkB,SAACC,GACZ,EAAKM,MAAMI,QAAQI,SAASd,IAC3B,EAAKW,WAAU,GACfI,WAAW,EAAKH,QAAS,QAEzB,EAAKD,WAAU,GACf,EAAKE,SAAS,CAACN,MAAO,EAAKD,MAAMC,MAAM,EAAGG,QAAQ,GAAD,mBAAM,EAAKJ,MAAMI,SAAjB,CAA0BV,MAC3Ee,WAAW,EAAKC,QAAS,O,EAIjCL,UAAY,SAACM,GACNA,GACC,EAAKJ,SAAS,CAACF,UAAW,wBAAIf,UAAU,4BAAd,eAC1BmB,YAAW,kBAAI,EAAKF,SAAS,CAACF,UAAW,wBAAIf,UAAU,qBAAd,iBAAoD,MAE7F,EAAKiB,SAAS,CAACF,UAAW,wBAAIf,UAAU,wCAAd,mB,EAIlCoB,QAAU,WAGN,IAFA,IAAIE,EAAa,YAAOT,GACpBU,EAAMV,EAAWW,OACbC,EAAI,EAAGA,EAAIF,EAAKE,GAAK,EAAG,CAC5B,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWN,GADjB,EAEqB,CAACD,EAAcI,GAAcJ,EAAcG,IAA3FH,EAAcG,GAFa,KAETH,EAAcI,GAFL,KAIhC,OAAO,EAAKT,SAAS,CAACJ,WAAYS,K,wEAG7B,IAAD,OACJ,OACI,6BACI,yBAAKtB,UAAU,eACX,wBAAIA,UAAU,SAAd,UAA8B8B,KAAKpB,MAAMC,MAAzC,kBAA+DmB,KAAKpB,MAAME,YAE9E,yBAAKZ,UAAU,yBACX,wBAAIA,UAAU,wBAAd,mBACA,wBAAIA,UAAU,2BAAd,WACA,+HAEH8B,KAAKpB,MAAMK,UACZ,yBAAKf,UAAU,aACV8B,KAAKpB,MAAMG,WAAWkB,KAAI,SAAAC,GACvB,OAAO,kBAAC,EAAD,CACC1B,MAAO0B,EAAI1B,MACX2B,IAAKD,EAAI5B,GACTA,GAAI4B,EAAI5B,GACRD,gBAAiB,EAAKA,sBAItC,4BAAQH,UAAU,eACd,gD,GAnECkC,aCODC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.79031404.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\n\nconst Character = (props) => {\n    return (\n        <div className={`img ${props.animation}`} onClick={() => props.handleSelection(props.id)}>\n            <img src={props.image} alt={props.name}></img>\n        </div>\n    )\n}\n\nexport default Character;","import React, {Component} from 'react';\nimport Character from './components/Character';\nimport characters from './characters.json'\nimport './index.css'\n\nclass Archer extends Component {\n    state = {\n        score: 0,\n        highScore: 0,\n        characters: characters,\n        clicked: [],\n        selection: <h2 className=\"text-center start\">Select an image to start!</h2>\n    }\n\n    restart = () => {\n        this.setState({selection: <h2 className=\"text-center start\">Select an image to start!</h2>})\n        this.state.highScore < this.state.score ? this.setState({highScore: this.state.score, score: 0, clicked: []}) : this.setState({score: 0, clicked: []})\n    }\n    \n    handleSelection = (id) => {\n        if(this.state.clicked.includes(id)){\n            this.selection(false);\n            setTimeout(this.restart, 2250);\n        } else {\n            this.selection(true);\n            this.setState({score: this.state.score+1, clicked: [...this.state.clicked, id]});\n            setTimeout(this.shuffle, 500);\n        }\n    }\n\n    selection = (correct) => {\n        if(correct){\n            this.setState({selection: <h2 className=\"text-center phrase start\">PHRASING!</h2>});\n            setTimeout(()=>this.setState({selection: <h2 className=\"text-center start\">PHRASING!</h2>}), 150);\n        } else {\n            this.setState({selection: <h2 className=\"text-center start danger font-italic\">DANGER ZONE!</h2>});\n        }\n    }\n\n    shuffle = () => {\n        let shuffledArray = [...characters];\n        let len = characters.length;\n        for(let i = 0; i < len; i += 1) {\n            let randomIndex = Math.floor(Math.random() * len);\n            [shuffledArray[i], shuffledArray[randomIndex]] = [shuffledArray[randomIndex], shuffledArray[i]];\n        }\n        return this.setState({characters: shuffledArray})\n    }\n\n    render(){\n        return (\n            <div>\n                <nav className=\"text-center\">\n                    <h2 className=\"score\">Score: {this.state.score} | High Score: {this.state.highScore}</h2>\n                </nav>\n                <div className=\"jumbotron text-center\">\n                    <h1 className=\"font-italic phrasing\">PHRASING!&ensp;</h1>\n                    <h1 className=\"font-weight-bolder boom\">BOOM!!!</h1>\n                    <h3>Select a different image each time to increase your score but remember to watch your phrasing!</h3>\n                </div>\n                {this.state.selection}\n                <div className=\"container\">\n                    {this.state.characters.map(all=>{\n                        return <Character \n                                image={all.image}\n                                key={all.id}\n                                id={all.id}\n                                handleSelection={this.handleSelection}\n                                />\n                    })}\n                </div>\n                <footer className=\"text-center\">\n                    <span>&copy;2019</span>\n                </footer>\n            </div>\n        )\n    }\n}\n\nexport default Archer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Archer from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Archer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}